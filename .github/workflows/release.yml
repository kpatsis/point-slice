name: Build Windows Installer

on:
  release:
    types: [published]
  workflow_dispatch:  # Allow manual triggering for testing

jobs:
  build-windows-installer:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Run tests
      run: |
        python run_tests.py
      env:
        PYTHONIOENCODING: utf-8
        
    - name: Build executable with PyInstaller
      run: |
        pyinstaller pyinstaller.spec
        
    - name: Create installer directory structure
      run: |
        mkdir installer
        Move-Item -Path "dist\DXF_Creator" -Destination "installer\DXF_Creator"
        
    - name: Debug - Show directory structure
      run: |
        echo "=== Contents of installer directory ==="
        Get-ChildItem -Path installer -Recurse | Select-Object FullName
        
    - name: Create simple batch installer
      shell: cmd 
      run: |
        echo @echo off > installer\install.bat
        echo echo Installing DXF Creator... >> installer\install.bat
        echo if not exist "%%USERPROFILE%%\DXF_Creator" mkdir "%%USERPROFILE%%\DXF_Creator" >> installer\install.bat
        echo xcopy /E /I /Y "DXF_Creator" "%%USERPROFILE%%\DXF_Creator" >> installer\install.bat
        echo echo. >> installer\install.bat
        echo echo Creating desktop shortcut... >> installer\install.bat
        echo powershell "$WshShell = New-Object -comObject WScript.Shell; $Shortcut = $WshShell.CreateShortcut('%%USERPROFILE%%\Desktop\DXF Creator.lnk'); $Shortcut.TargetPath = '%%USERPROFILE%%\DXF_Creator\DXF_Creator.exe'; $Shortcut.Save()" >> installer\install.bat
        echo echo. >> installer\install.bat
        echo echo Installation complete! >> installer\install.bat
        echo echo DXF Creator has been installed to: %%USERPROFILE%%\DXF_Creator >> installer\install.bat
        echo echo A desktop shortcut has been created. >> installer\install.bat
        echo pause >> installer\install.bat
        
    - name: Create uninstaller
      shell: cmd
      run: |
        echo @echo off > installer\uninstall.bat
        echo echo Uninstalling DXF Creator... >> installer\uninstall.bat
        echo if exist "%%USERPROFILE%%\DXF_Creator" rmdir /S /Q "%%USERPROFILE%%\DXF_Creator" >> installer\uninstall.bat
        echo if exist "%%USERPROFILE%%\Desktop\DXF Creator.lnk" del "%%USERPROFILE%%\Desktop\DXF Creator.lnk" >> installer\uninstall.bat
        echo echo DXF Creator has been uninstalled. >> installer\uninstall.bat
        echo pause >> installer\uninstall.bat
        
    - name: Create README for installer
      run: |
        echo "DXF Creator - Windows Installer" > installer\README.txt
        Add-Content installer\README.txt ""
        Add-Content installer\README.txt "This installer contains the DXF Creator application for Windows."
        Add-Content installer\README.txt ""
        Add-Content installer\README.txt "Installation Instructions:"
        Add-Content installer\README.txt "1. Run install.bat as Administrator"
        Add-Content installer\README.txt "2. The application will be installed to your user directory"
        Add-Content installer\README.txt "3. A desktop shortcut will be created"
        Add-Content installer\README.txt ""
        Add-Content installer\README.txt "Uninstallation:"
        Add-Content installer\README.txt "- Run uninstall.bat to remove the application"
        Add-Content installer\README.txt ""
        Add-Content installer\README.txt "About:"
        Add-Content installer\README.txt "A Python application for converting CSV point cloud data to DXF files."
        Add-Content installer\README.txt "Provides both command-line and GUI interfaces."
        
    - name: Get release info
      id: release_info
      run: |
        if ("${{ github.event_name }}" -eq "release") {
          $tag = "${{ github.event.release.tag_name }}"
        } else {
          $tag = "manual-build-$(Get-Date -Format 'yyyy-MM-dd-HH-mm')"
        }
        echo "tag=$tag" >> $env:GITHUB_OUTPUT
        echo "filename=DXF_Creator_Windows_Installer_$tag.zip" >> $env:GITHUB_OUTPUT
        
    - name: Upload installer as artifact
      uses: actions/upload-artifact@v4
      with:
        name: DXF_Creator_Windows_Installer_${{ steps.release_info.outputs.tag }}
        path: installer/
        retention-days: 90
        
    - name: Create ZIP for release (if release event)
      if: github.event_name == 'release'
      shell: cmd
      run: |
        cd installer
        tar -a -c -f ..\${{ steps.release_info.outputs.filename }} *
        
    - name: Upload installer to release (if release event)
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ${{ steps.release_info.outputs.filename }}
        asset_name: ${{ steps.release_info.outputs.filename }}
        asset_content_type: application/zip 